{"ast":null,"code":"var _jsxFileName = \"/home/joep/Downloads/code_nation/masterCourse/week5/learning-react/src/App.js\",\n    _s = $RefreshSig$();\n\n//////////////////calculator ////////////////////////////////////////\nimport { useState } from \"react\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [output, setOutput] = useState([]);\n  const operators = [\"+\", \"-\", \"x\", \"%\"];\n  const data = [[7, 8, 9], [4, 5, 6], [1, 2, 3], [0, \".\", \"AC\"]];\n\n  const addHandler = (e, val) => {\n    //onClick of add button\n    const newArr = [...output]; //Adds every task in {todoList} to newArr.\n\n    newArr.push(val); //add userInput of textbox to newArr (adds new task to list)\n\n    setOutput(newArr); //sets todoList to newArray (updates frontEnd todoList with new list.)\n\n    console.log(2);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"calcContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"output\",\n      children: output\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"operators\",\n      children: operators.map((operator, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"operator\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text noGap\",\n            children: operator\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 13\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: data.map(row => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: row.map(num => /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"numPadItem\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text noGap\",\n              onClick: addHandler,\n              children: num\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 21\n            }, this)\n          }, num, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"equals\",\n        children: \"=\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 3\n  }, this);\n};\n\n_s(App, \"WZWBLkrbA6KPEzQTKNE+aPyfpCE=\");\n\n_c = App;\nexport default App; ///////////todo list ATTEMPT 2/////////////////\n// import { useState } from \"react\";\n// import './App.css';\n// const App = () => {\n//   const [todoList, setTodoList] = useState([]);\n//   const [userInput, setUserInput] = useState(\"\");\n//   const updateInput = (e) => { //onChange of inputbox, \n//     setUserInput(e.target.value); //make userInput = input of box\n//   };\n// const addHandler = (e) => { //onClick of add button\n//   const newArr = [...todoList]; //Adds every task in {todoList} to newArr.\n//   newArr.push(userInput); //add userInput of textbox to newArr (adds new task to list)\n//   setTodoList(newArr); //sets todoList to newArray (updates frontEnd todoList with new list.)\n//   setUserInput(\"\") //remove input displayed below inputBox. (seems as though nothing has changed, but the text displayed is now the content of the array, not the userInput.)\n// };\n//   const removeHandler = (index) => { //remove task from list\n//     const newArr = [...todoList]; //add every task in toDo list to newArr (makes an identical copy)\n//     newArr.splice(index, 1); //remove task from array\n//     setTodoList(newArr); //updates frontend array with new version\n//   };\n//   return (\n//     <div>\n//       <div id=\"inputs\">\n//         <input \n//           type=\"text\" \n//           onChange={updateInput}\n//         />\n//         <button \n//           id=\"addButton\"\n//           onClick={addHandler}>\n//             add\n//         </button>\n//         <p>Click on the below buttons to remove tasks or change status</p>\n//       </div>\n//       {/* <h2>{userInput}</h2> */} {/*displays the live content of inputBox*/}\n//       {todoList.map((item, index) => {\n//         return <Card \n//           index={index} \n//           removeHandler={removeHandler} \n//           key={index} \n//           item={item} \n//         />;\n//       })}\n//     </div>\n//   );\n// };\n// const Card = (props) => {\n//   const [style, setStyle] = useState(\"inProgressButton button\")\n//   const [status, setStatus] = useState(\"In Progress\")\n//   const changeStyle = () => {\n//     console.log(\"you just clicked\");\n//     if (status==\"Complete\") {\n//       setStatus(\"In Progress\");\n//       setStyle(\"inProgressButton button\")\n//     } else {\n//       setStatus(\"Complete\");\n//       setStyle(\"completeButton button\")\n//     }\n//   };\n//   return (\n//       <div className=\"item\">\n//         <h2 className=\"task\">{props.item}</h2>\n//         <div className=\"test\">\n//           <div \n//             className={style}\n//             onClick={() => changeStyle(\"Complete\")}>\n//             <p>\n//               {status}\n//             </p>\n//           </div>\n//           <div \n//             className=\"remButton button\"\n//             onClick={() => props.removeHandler(props.index)}>\n//             <p>\n//               remove\n//             </p>\n//           </div>\n//         </div>\n//     </div>\n//   );\n//   };\n// export default App;\n///////////todo list TUTOR EXAMPLE/////////////////\n// import { useState } from \"react\";\n// const App = () => {\n//   const [list, setList] = useState([]);\n//   const [userInput, setUserInput] = useState(\"\");\n// const updateInput = (e) => { //onChange of inputbox, \n//   setUserInput(e.target.value); //make userInput = input of box\n// };\n// const addHandler = (e) => { //onClick of add button\n//   const newArr = [...todoList]; //Adds every task in {todoList} to newArr.\n//   newArr.push(userInput); //add userInput of textbox to newArr (adds new task to list)\n//   setTodoList(newArr); //sets todoList to newArray (updates frontEnd todoList with new list.)\n//   setUserInput(\"\") //remove input displayed below inputBox. (seems as though nothing has changed, but the text displayed is now the content of the array, not the userInput.)\n// };\n// const removeHandler = (index) => { //remove task from list\n//   const newArr = [...todoList]; //add every task in toDo list to newArr (makes an identical copy)\n//   newArr.splice(index, 1); //remove task from array\n//   setTodoList(newArr); //updates frontend array with new version\n// };\n//   return (\n//     <div>\n//       <h1>todo list</h1>\n//       <input type=\"text\" value={userInput} onChange={updateInput} />\n//       <button onClick={addHandler}>add</button>\n//       <h2>{userInput}</h2>\n//       {list.map((item, index) => {\n//         return <Card index={index} removeHandler={removeHandler} key={index} item={item} />;\n//       })}\n//     </div>\n//   );\n// };\n// const Card = (props) => {\n//   return (\n//     <div>\n//       <h2>{props.item}</h2>\n//       <button onClick={() => props.removeHandler(props.index)}>remove</button>\n//     </div>\n//   );\n// };\n// export default App;\n//// todo list ATTEMPT 1\n// import React, {useState} from \"react\";\n// import './App.css';\n// const IntroState = () => {\n//   const [tasks, setTasks] = useState([\n//     {task: \"shopping\", status: 33},\n//     {task: \"cooking\", status:12},\n//     {task: \"cleaning\", status: 13}\n//   ]);\n//   const [completed,setStatus] = useState(true);\n//   const greeting = (value) => {\n//     alert(value);\n//   };\n//   return (\n//     <div>\n//       {this.tasks.map((task, index) => {\n//         {!completed ? (\n//           <div className=\".item\">\n//             <Task task = {tasks[0].task} func={greeting(\"in progress\")} />\n//             <button onClick={() => setStatus(true)}>complete</button>\n//           </div>\n//         ) : (\n//           <div className=\".item\">\n//             <Task task = {tasks[0].task} func={greeting(\"complete\")} />\n//             <button onClick={() => setStatus(false)}>in progress</button>\n//           </div>\n//         )}\n//       })}\n//     </div>\n//   )\n// }\n// const Task = (props) => {\n//   return (\n//     <div>\n//       <h1>{props.task}</h1>\n//     </div>\n//   )\n// }\n// export default IntroState\n/////TODO complete props challenges presentation///////////////////////////////////\n/////TODO resume map presentation slide 29//////////////////////////////////////\n/////////////map method - returning entire components//////////////////////////\n// import React from 'react'\n// class App extends React.Component{\n//   state = {\n//     people: [\n//       {name: \"dan\", age:34},\n//       {name: \"ben\", age:21}\n//     ]    \n//   };\n//   render() {\n//     return(\n//       <div>\n//         {this.state.people.map((person,index) =>{\n//           return <Person key={index} name={person.name} age={person.age} />;\n//         })}\n//       </div>  \n//     )\n//   }\n// }\n// const Person = props => { //Person parameter represents each item in our array. These items are an object so we can use dot notation to access its values, but they'll be different each time.\n//   return (\n//     <div>\n//       <h1>{props.name}</h1>\n//       <p>{props.age}</p>\n//     </div>\n//   )\n// }\n// export default App\n/////////////map method - using state///////////////////////////////////////////////////\n//this is the same as below method, but using state instead of render()\n// import React from 'react'\n// class App extends React.Component {\n//   state = { //Sometimes you will stores arrays and stuff in the state. this is how.\n//     bookPrices: [2.5, 4.5, 3.5, 6.0, 8.0]\n//   }\n//   render() {\n//     return (\n//       <div>\n//         {this.state.bookPrices.map((price, index) => {\n//           return (\n//           <div key={index}> {/*If map function returns multiple elements,you only need to put a key on the parent.*/}\n//             <h1>I am h1 element</h1>\n//             <p>i am p element</p>\n//             <p>{price}</p>\n//             <button>Button</button>\n//           </div>)\n//         })}\n//       </div>\n//     )\n//   }\n// }\n// export default App\n//////////////map method////////////////////////////////////////////////////////////\n// import React from 'react'\n// class App extends React.Component {\n//   render() {\n//     const bookPrices = [2.5, 4.5, 3.5, 6.9, 8.0] //variables, functions and stuff get declared in render()\n//   return (\n//     <div>\n//       {bookPrices.map(price => {\n//         return <h1>The price is {price}</h1>;\n//       })}\n//     </div>\n//   )\n//   }\n// }\n// export default App\n///////////incremenet and decrementing with buttons////////////////////////\n//show value which get decreased when minus button pressed and increased when up button pressed.\n// import React, {useState} from \"react\";\n// const App = () => {\n//   const [num, setNum] = useState(0)\n//   const minusHandler = () => {\n//     setNum(num -1)\n//   }\n//   return (\n//     <div>\n//       <h1>{num}</h1>\n//       <button onClick={() => setNum(num + 1)}>add one</button>\n//       <button onClick={() => setNum(num - 1)}>minus one</button>\n//       {/* <button onClick={minusHandler}>minus one</button> */} {/*alternative to above line */}\n//     </div>\n//   )\n// }\n// export default App\n////////////////////////////////////////////\n// Here we pass state and methods via props\n// import React, {useState} from \"react\";\n// const App = () => {\n//   const [persons, setPersons] = useState([\n//     {name: \"Leon\"}, \n//     {name: \"Jordan\"}\n//   ])\n//   const handleClick = () => {\n//     console.log(\"Clickity click\");\n//   }\n//   return (\n//     <div>\n//       <Person name={persons[0].name} clickMe={handleClick}/>\n//       <Person name={persons[1].name} clickMe={handleClick}/>\n//     </div>\n//   )\n// }\n// const Person = (props) => {\n//   return (\n//     // <h1 onClick={props.clickMe}>{props.name}</h1> //prints \"clickety click\" upon click of \"Jordan\" text.\n//     <h1 onClick={() => props.clickMe(\"Hi there\")}>{props.name}</h1> //This is how to pass a value to a function on click, which is handled slightly differnetly. this is called an anonymous function.\n//   )\n// }\n//////////////stateDemonstration 2//////////////////////\n// import React, {useState} from \"react\";\n// const App = () => {\n//     const [count, setCount] = useState(0) //useState function returns 2 values which we restructure with []\n//     return (\n//       <div>\n//         <h1>{count}</h1>\n//       </div>\n//     )\n//     increment = () => {\n//     }\n//   }\n// //////////////state demonstration 1/////////////////////\n// import './App.css';\n// import React from 'react';\n// class App extends React.Component {\n//   state = {  //state is a property of the class\n//     persons: [ //persons is a property of state. Holds an array of 2 objects.\n//       {name: \"Dan\", age: 34},\n//       {name: \"Ben\", age: 21}\n//     ]\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h1>I'm a class component</h1>\n//         <p>{this.state.persons[1].age}</p> {/* returns age of 2nd persons. (21)*/}        \n//       </div>\n//     );\n//   }\n// }\n// ///////////////////////////////////////////\n// export default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/joep/Downloads/code_nation/masterCourse/week5/learning-react/src/App.js"],"names":["useState","App","output","setOutput","operators","data","addHandler","e","val","newArr","push","console","log","map","operator","index","row","num"],"mappings":";;;AACA;AACA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAO,WAAP;;;AACA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBH,QAAQ,CAAC,EAAD,CAApC;AACA,QAAMI,SAAS,GAAG,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,CAAlB;AACA,QAAMC,IAAI,GAAG,CAAC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAD,EAAS,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAT,EAAiB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAjB,EAAyB,CAAC,CAAD,EAAG,GAAH,EAAO,IAAP,CAAzB,CAAb;;AAEA,QAAMC,UAAU,GAAG,CAACC,CAAD,EAAIC,GAAJ,KAAY;AAAE;AAC/B,UAAMC,MAAM,GAAG,CAAC,GAAGP,MAAJ,CAAf,CAD6B,CACD;;AAC5BO,IAAAA,MAAM,CAACC,IAAP,CAAYF,GAAZ,EAF6B,CAEX;;AAClBL,IAAAA,SAAS,CAACM,MAAD,CAAT,CAH6B,CAGV;;AACnBE,IAAAA,OAAO,CAACC,GAAR,CAAY,CAAZ;AACD,GALD;;AAOA,sBACA;AAAK,IAAA,EAAE,EAAC,eAAR;AAAA,4BACE;AAAK,MAAA,EAAE,EAAC,QAAR;AAAA,gBACGV;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eAKE;AAAK,MAAA,EAAE,EAAC,WAAR;AAAA,gBACGE,SAAS,CAACS,GAAV,CAAc,CAACC,QAAD,EAAWC,KAAX,KAAqB;AAClC,4BACE;AACE,UAAA,SAAS,EAAC,UADZ;AAAA,uCAEE;AAAG,YAAA,SAAS,EAAC,YAAb;AAAA,sBAA2BD;AAA3B;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA,WAAUC,KAAV;AAAA;AAAA;AAAA;AAAA,gBADF;AAMD,OAPA;AADH;AAAA;AAAA;AAAA;AAAA,YALF,eAgBE;AAAK,MAAA,EAAE,EAAE,WAAT;AAAA,8BACE;AAAA,kBACGV,IAAI,CAACQ,GAAL,CAAUG,GAAD,iBACN;AAAA,oBACGA,GAAG,CAACH,GAAJ,CAAQI,GAAG,iBACV;AACE,YAAA,SAAS,EAAC,YADZ;AAAA,mCAGI;AAAG,cAAA,SAAS,EAAC,YAAb;AAA0B,cAAA,OAAO,EAAEX,UAAnC;AAAA,wBACKW;AADL;AAAA;AAAA;AAAA;AAAA;AAHJ,aAEOA,GAFP;AAAA;AAAA;AAAA;AAAA,kBADD;AADH;AAAA;AAAA;AAAA;AAAA,gBADH;AADH;AAAA;AAAA;AAAA;AAAA,cADF,eAkBE;AAAK,QAAA,EAAE,EAAC,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBF;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAyCD,CArDD;;GAAMhB,G;;KAAAA,G;AAuDN,eAAeA,GAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEE;AACA;AACA;AACA;AACA;AACA;AAEF;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["\n//////////////////calculator ////////////////////////////////////////\nimport { useState } from \"react\";\nimport './App.css';\nconst App = () => {\n  const [output, setOutput] = useState([]);\n  const operators = [\"+\",\"-\",\"x\",\"%\"]\n  const data = [[7,8,9],[4,5,6],[1,2,3],[0,\".\",\"AC\"]]\n\n  const addHandler = (e, val) => { //onClick of add button\n    const newArr = [...output]; //Adds every task in {todoList} to newArr.\n    newArr.push(val); //add userInput of textbox to newArr (adds new task to list)\n    setOutput(newArr); //sets todoList to newArray (updates frontEnd todoList with new list.)\n    console.log(2)\n  };\n\n  return (\n  <div id=\"calcContainer\">\n    <div id=\"output\">\n      {output}\n    </div>\n\n    <div id=\"operators\">\n      {operators.map((operator, index) => {\n        return (\n          <div key={index}\n            className=\"operator\"> {/*If map function returns multiple elements,you only need to put a key on the parent.*/}\n            <p className=\"text noGap\">{operator}</p>\n          </div>\n        )\n      })}\n    </div>\n\n    <div id =\"container\">\n      <div> \n        {data.map((row) => (\n            <div>\n              {row.map(num => \n                <th \n                  className=\"numPadItem\" \n                  key={num}>\n                    <p className=\"text noGap\" onClick={addHandler}>\n                        {num}\n                    </p>\n                </th>\n              )}\n            </div>\n          ))\n        }\n      </div>\n\n      <div id=\"equals\">\n        =\n      </div>\n    </div>\n  </div>\n  )\n}\n\nexport default App;\n\n///////////todo list ATTEMPT 2/////////////////\n// import { useState } from \"react\";\n// import './App.css';\n// const App = () => {\n//   const [todoList, setTodoList] = useState([]);\n//   const [userInput, setUserInput] = useState(\"\");\n\n\n//   const updateInput = (e) => { //onChange of inputbox, \n//     setUserInput(e.target.value); //make userInput = input of box\n//   };\n\n  // const addHandler = (e) => { //onClick of add button\n  //   const newArr = [...todoList]; //Adds every task in {todoList} to newArr.\n  //   newArr.push(userInput); //add userInput of textbox to newArr (adds new task to list)\n  //   setTodoList(newArr); //sets todoList to newArray (updates frontEnd todoList with new list.)\n  //   setUserInput(\"\") //remove input displayed below inputBox. (seems as though nothing has changed, but the text displayed is now the content of the array, not the userInput.)\n  // };\n\n//   const removeHandler = (index) => { //remove task from list\n//     const newArr = [...todoList]; //add every task in toDo list to newArr (makes an identical copy)\n//     newArr.splice(index, 1); //remove task from array\n//     setTodoList(newArr); //updates frontend array with new version\n//   };\n\n//   return (\n//     <div>\n//       <div id=\"inputs\">\n//         <input \n//           type=\"text\" \n//           onChange={updateInput}\n//         />\n//         <button \n//           id=\"addButton\"\n//           onClick={addHandler}>\n//             add\n//         </button>\n//         <p>Click on the below buttons to remove tasks or change status</p>\n//       </div>\n//       {/* <h2>{userInput}</h2> */} {/*displays the live content of inputBox*/}\n//       {todoList.map((item, index) => {\n//         return <Card \n//           index={index} \n//           removeHandler={removeHandler} \n//           key={index} \n//           item={item} \n//         />;\n//       })}\n//     </div>\n//   );\n// };\n\n// const Card = (props) => {\n//   const [style, setStyle] = useState(\"inProgressButton button\")\n//   const [status, setStatus] = useState(\"In Progress\")\n\n//   const changeStyle = () => {\n//     console.log(\"you just clicked\");\n//     if (status==\"Complete\") {\n//       setStatus(\"In Progress\");\n//       setStyle(\"inProgressButton button\")\n//     } else {\n//       setStatus(\"Complete\");\n//       setStyle(\"completeButton button\")\n//     }\n//   };\n  \n//   return (\n//       <div className=\"item\">\n//         <h2 className=\"task\">{props.item}</h2>\n//         <div className=\"test\">\n//           <div \n//             className={style}\n//             onClick={() => changeStyle(\"Complete\")}>\n//             <p>\n//               {status}\n//             </p>\n//           </div>\n//           <div \n//             className=\"remButton button\"\n//             onClick={() => props.removeHandler(props.index)}>\n//             <p>\n//               remove\n//             </p>\n//           </div>\n//         </div>\n//     </div>\n//   );\n//   };\n\n// export default App;\n\n///////////todo list TUTOR EXAMPLE/////////////////\n\n// import { useState } from \"react\";\n// const App = () => {\n//   const [list, setList] = useState([]);\n//   const [userInput, setUserInput] = useState(\"\");\n\n// const updateInput = (e) => { //onChange of inputbox, \n//   setUserInput(e.target.value); //make userInput = input of box\n// };\n\n// const addHandler = (e) => { //onClick of add button\n//   const newArr = [...todoList]; //Adds every task in {todoList} to newArr.\n//   newArr.push(userInput); //add userInput of textbox to newArr (adds new task to list)\n//   setTodoList(newArr); //sets todoList to newArray (updates frontEnd todoList with new list.)\n//   setUserInput(\"\") //remove input displayed below inputBox. (seems as though nothing has changed, but the text displayed is now the content of the array, not the userInput.)\n// };\n\n// const removeHandler = (index) => { //remove task from list\n//   const newArr = [...todoList]; //add every task in toDo list to newArr (makes an identical copy)\n//   newArr.splice(index, 1); //remove task from array\n//   setTodoList(newArr); //updates frontend array with new version\n// };\n\n//   return (\n//     <div>\n//       <h1>todo list</h1>\n//       <input type=\"text\" value={userInput} onChange={updateInput} />\n//       <button onClick={addHandler}>add</button>\n//       <h2>{userInput}</h2>\n//       {list.map((item, index) => {\n//         return <Card index={index} removeHandler={removeHandler} key={index} item={item} />;\n//       })}\n//     </div>\n//   );\n// };\n\n// const Card = (props) => {\n//   return (\n//     <div>\n//       <h2>{props.item}</h2>\n//       <button onClick={() => props.removeHandler(props.index)}>remove</button>\n//     </div>\n//   );\n// };\n// export default App;\n\n\n\n\n//// todo list ATTEMPT 1\n// import React, {useState} from \"react\";\n// import './App.css';\n\n// const IntroState = () => {\n//   const [tasks, setTasks] = useState([\n//     {task: \"shopping\", status: 33},\n//     {task: \"cooking\", status:12},\n//     {task: \"cleaning\", status: 13}\n//   ]);\n\n//   const [completed,setStatus] = useState(true);\n\n//   const greeting = (value) => {\n//     alert(value);\n//   };\n\n//   return (\n//     <div>\n//       {this.tasks.map((task, index) => {\n//         {!completed ? (\n//           <div className=\".item\">\n//             <Task task = {tasks[0].task} func={greeting(\"in progress\")} />\n//             <button onClick={() => setStatus(true)}>complete</button>\n//           </div>\n\n//         ) : (\n//           <div className=\".item\">\n//             <Task task = {tasks[0].task} func={greeting(\"complete\")} />\n//             <button onClick={() => setStatus(false)}>in progress</button>\n//           </div>\n//         )}\n//       })}\n//     </div>\n//   )\n// }\n\n// const Task = (props) => {\n//   return (\n//     <div>\n//       <h1>{props.task}</h1>\n//     </div>\n//   )\n// }\n\n\n\n// export default IntroState\n\n/////TODO complete props challenges presentation///////////////////////////////////\n/////TODO resume map presentation slide 29//////////////////////////////////////\n\n/////////////map method - returning entire components//////////////////////////\n// import React from 'react'\n// class App extends React.Component{\n//   state = {\n//     people: [\n//       {name: \"dan\", age:34},\n//       {name: \"ben\", age:21}\n//     ]    \n//   };\n  \n//   render() {\n//     return(\n//       <div>\n//         {this.state.people.map((person,index) =>{\n//           return <Person key={index} name={person.name} age={person.age} />;\n//         })}\n//       </div>  \n//     )\n//   }\n// }\n\n// const Person = props => { //Person parameter represents each item in our array. These items are an object so we can use dot notation to access its values, but they'll be different each time.\n//   return (\n//     <div>\n//       <h1>{props.name}</h1>\n//       <p>{props.age}</p>\n//     </div>\n//   )\n// }\n\n// export default App\n\n/////////////map method - using state///////////////////////////////////////////////////\n//this is the same as below method, but using state instead of render()\n// import React from 'react'\n// class App extends React.Component {\n//   state = { //Sometimes you will stores arrays and stuff in the state. this is how.\n//     bookPrices: [2.5, 4.5, 3.5, 6.0, 8.0]\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         {this.state.bookPrices.map((price, index) => {\n//           return (\n//           <div key={index}> {/*If map function returns multiple elements,you only need to put a key on the parent.*/}\n//             <h1>I am h1 element</h1>\n//             <p>i am p element</p>\n//             <p>{price}</p>\n//             <button>Button</button>\n//           </div>)\n//         })}\n//       </div>\n//     )\n//   }\n// }\n\n// export default App\n\n//////////////map method////////////////////////////////////////////////////////////\n// import React from 'react'\n// class App extends React.Component {\n//   render() {\n//     const bookPrices = [2.5, 4.5, 3.5, 6.9, 8.0] //variables, functions and stuff get declared in render()\n\n//   return (\n//     <div>\n//       {bookPrices.map(price => {\n//         return <h1>The price is {price}</h1>;\n//       })}\n//     </div>\n//   )\n//   }\n// }\n\n// export default App\n\n\n///////////incremenet and decrementing with buttons////////////////////////\n//show value which get decreased when minus button pressed and increased when up button pressed.\n// import React, {useState} from \"react\";\n\n// const App = () => {\n//   const [num, setNum] = useState(0)\n//   const minusHandler = () => {\n//     setNum(num -1)\n//   }\n//   return (\n//     <div>\n//       <h1>{num}</h1>\n//       <button onClick={() => setNum(num + 1)}>add one</button>\n//       <button onClick={() => setNum(num - 1)}>minus one</button>\n//       {/* <button onClick={minusHandler}>minus one</button> */} {/*alternative to above line */}\n//     </div>\n//   )\n// }\n\n// export default App\n\n////////////////////////////////////////////\n// Here we pass state and methods via props\n// import React, {useState} from \"react\";\n\n// const App = () => {\n//   const [persons, setPersons] = useState([\n//     {name: \"Leon\"}, \n//     {name: \"Jordan\"}\n//   ])\n\n//   const handleClick = () => {\n//     console.log(\"Clickity click\");\n//   }\n\n//   return (\n//     <div>\n//       <Person name={persons[0].name} clickMe={handleClick}/>\n//       <Person name={persons[1].name} clickMe={handleClick}/>\n//     </div>\n//   )\n// }\n\n// const Person = (props) => {\n//   return (\n//     // <h1 onClick={props.clickMe}>{props.name}</h1> //prints \"clickety click\" upon click of \"Jordan\" text.\n//     <h1 onClick={() => props.clickMe(\"Hi there\")}>{props.name}</h1> //This is how to pass a value to a function on click, which is handled slightly differnetly. this is called an anonymous function.\n//   )\n\n// }\n\n\n\n//////////////stateDemonstration 2//////////////////////\n// import React, {useState} from \"react\";\n\n// const App = () => {\n//     const [count, setCount] = useState(0) //useState function returns 2 values which we restructure with []\n\n//     return (\n//       <div>\n//         <h1>{count}</h1>\n//       </div>\n//     )\n    \n//     increment = () => {\n\n//     }\n//   }\n\n// //////////////state demonstration 1/////////////////////\n\n// import './App.css';\n// import React from 'react';\n\n// class App extends React.Component {\n//   state = {  //state is a property of the class\n//     persons: [ //persons is a property of state. Holds an array of 2 objects.\n//       {name: \"Dan\", age: 34},\n//       {name: \"Ben\", age: 21}\n//     ]\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <h1>I'm a class component</h1>\n//         <p>{this.state.persons[1].age}</p> {/* returns age of 2nd persons. (21)*/}        \n//       </div>\n//     );\n//   }\n// }\n// ///////////////////////////////////////////\n\n// export default App;"]},"metadata":{},"sourceType":"module"}