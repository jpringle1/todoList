{"ast":null,"code":"var constants = require('../constants');\n\nmodule.exports = {\n  // Unit converters\n  yardsToFeet: function (n) {\n    return n * constants.YARDS_TO_FEET_FACTOR;\n  },\n  feetToYards: function (n) {\n    return n * constants.FEET_TO_YARDS_FACTOR;\n  },\n  yardsToInches: function (n) {\n    return n * constants.YARDS_TO_INCHES_FACTOR;\n  },\n  inchesToYards: function (n) {\n    return constants.INCHES_TO_YARDS_FACTOR * n;\n  },\n  inchesToMiles: function (n) {\n    return constants.INCHES_TO_MILES_FACTOR * n;\n  },\n  feetToInches: function (n) {\n    return constants.FEET_TO_INCHES_FACTOR * n;\n  },\n  feetToMeters: function (n) {\n    return constants.FEET_TO_METERS_FACTOR * n;\n  },\n  feetToMiles: function (n) {\n    return constants.FEET_TO_MILES_FACTOR * n;\n  },\n  inchesToFeet: function (n) {\n    return constants.INCHES_TO_FEET_FACTOR * n;\n  },\n  inchesToMeters: function (n) {\n    return constants.INCHES_TO_METERS_FACTOR * n;\n  },\n  milesToYards: function (n) {\n    return constants.MILES_TO_YARDS_FACTOR * n;\n  },\n  milesToMeters: function (n) {\n    return constants.MILES_TO_METERS_FACTOR * n;\n  },\n  milesToInches: function (n) {\n    return constants.MILES_TO_INCHES_FACTOR * n;\n  },\n  milesToFeet: function (n) {\n    return constants.MILES_TO_FEET_FACTOR * n;\n  },\n  yardsToMiles: function (n) {\n    return constants.YARDS_TO_MILES_FACTOR * n;\n  },\n  yardsToMeters: function (n) {\n    return constants.YARDS_TO_METERS_FACTOR * n;\n  },\n  toFahrenheit: function (val) {\n    return val * constants.CELSIUS_TO_FAHRENEIT_MUTLIPLIER_FACTOR + constants.CELSIUS_TO_FAHRENEIT_FACTOR;\n  },\n  toCelsius: function (val) {\n    return (val - constants.CELSIUS_TO_FAHRENEIT_FACTOR) / constants.CELSIUS_TO_FAHRENEIT_MUTLIPLIER_FACTOR;\n  }\n};","map":{"version":3,"sources":["/home/joep/Downloads/code_nation/masterCourse/week5/learning-react/node_modules/math.js/lib/unit/index.js"],"names":["constants","require","module","exports","yardsToFeet","n","YARDS_TO_FEET_FACTOR","feetToYards","FEET_TO_YARDS_FACTOR","yardsToInches","YARDS_TO_INCHES_FACTOR","inchesToYards","INCHES_TO_YARDS_FACTOR","inchesToMiles","INCHES_TO_MILES_FACTOR","feetToInches","FEET_TO_INCHES_FACTOR","feetToMeters","FEET_TO_METERS_FACTOR","feetToMiles","FEET_TO_MILES_FACTOR","inchesToFeet","INCHES_TO_FEET_FACTOR","inchesToMeters","INCHES_TO_METERS_FACTOR","milesToYards","MILES_TO_YARDS_FACTOR","milesToMeters","MILES_TO_METERS_FACTOR","milesToInches","MILES_TO_INCHES_FACTOR","milesToFeet","MILES_TO_FEET_FACTOR","yardsToMiles","YARDS_TO_MILES_FACTOR","yardsToMeters","YARDS_TO_METERS_FACTOR","toFahrenheit","val","CELSIUS_TO_FAHRENEIT_MUTLIPLIER_FACTOR","CELSIUS_TO_FAHRENEIT_FACTOR","toCelsius"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,cAAD,CAAvB;;AACAC,MAAM,CAACC,OAAP,GAAiB;AAEb;AACAC,EAAAA,WAAW,EAAE,UAASC,CAAT,EAAY;AACrB,WAAOA,CAAC,GAAGL,SAAS,CAACM,oBAArB;AACH,GALY;AAObC,EAAAA,WAAW,EAAE,UAASF,CAAT,EAAY;AACrB,WAAOA,CAAC,GAAGL,SAAS,CAACQ,oBAArB;AACH,GATY;AAWbC,EAAAA,aAAa,EAAE,UAASJ,CAAT,EAAY;AACvB,WAAOA,CAAC,GAAGL,SAAS,CAACU,sBAArB;AACH,GAbY;AAebC,EAAAA,aAAa,EAAE,UAASN,CAAT,EAAY;AACvB,WAAOL,SAAS,CAACY,sBAAV,GAAmCP,CAA1C;AACH,GAjBY;AAmBbQ,EAAAA,aAAa,EAAE,UAASR,CAAT,EAAY;AACvB,WAAOL,SAAS,CAACc,sBAAV,GAAmCT,CAA1C;AACH,GArBY;AAuBbU,EAAAA,YAAY,EAAE,UAASV,CAAT,EAAY;AACtB,WAAOL,SAAS,CAACgB,qBAAV,GAAkCX,CAAzC;AACH,GAzBY;AA2BbY,EAAAA,YAAY,EAAE,UAAUZ,CAAV,EAAa;AACvB,WAAOL,SAAS,CAACkB,qBAAV,GAAkCb,CAAzC;AACH,GA7BY;AA+Bbc,EAAAA,WAAW,EAAE,UAASd,CAAT,EAAY;AACrB,WAAOL,SAAS,CAACoB,oBAAV,GAAiCf,CAAxC;AACH,GAjCY;AAmCbgB,EAAAA,YAAY,EAAE,UAAShB,CAAT,EAAY;AACtB,WAAOL,SAAS,CAACsB,qBAAV,GAAkCjB,CAAzC;AACH,GArCY;AAuCbkB,EAAAA,cAAc,EAAE,UAASlB,CAAT,EAAY;AACxB,WAAOL,SAAS,CAACwB,uBAAV,GAAoCnB,CAA3C;AACH,GAzCY;AA2CboB,EAAAA,YAAY,EAAE,UAASpB,CAAT,EAAY;AACtB,WAAOL,SAAS,CAAC0B,qBAAV,GAAkCrB,CAAzC;AACH,GA7CY;AA+CbsB,EAAAA,aAAa,EAAE,UAAStB,CAAT,EAAY;AACvB,WAAOL,SAAS,CAAC4B,sBAAV,GAAmCvB,CAA1C;AACH,GAjDY;AAmDbwB,EAAAA,aAAa,EAAE,UAASxB,CAAT,EAAY;AACvB,WAAOL,SAAS,CAAC8B,sBAAV,GAAmCzB,CAA1C;AACH,GArDY;AAuDb0B,EAAAA,WAAW,EAAE,UAAS1B,CAAT,EAAY;AACrB,WAAOL,SAAS,CAACgC,oBAAV,GAAiC3B,CAAxC;AACH,GAzDY;AA2Db4B,EAAAA,YAAY,EAAE,UAAS5B,CAAT,EAAY;AACtB,WAAOL,SAAS,CAACkC,qBAAV,GAAkC7B,CAAzC;AACH,GA7DY;AA+Db8B,EAAAA,aAAa,EAAE,UAAS9B,CAAT,EAAY;AACvB,WAAOL,SAAS,CAACoC,sBAAV,GAAmC/B,CAA1C;AACH,GAjEY;AAmEbgC,EAAAA,YAAY,EAAE,UAASC,GAAT,EAAc;AACxB,WAAOA,GAAG,GAAGtC,SAAS,CAACuC,sCAAhB,GAAyDvC,SAAS,CAACwC,2BAA1E;AACH,GArEY;AAuEbC,EAAAA,SAAS,EAAE,UAASH,GAAT,EAAc;AACrB,WAAO,CAACA,GAAG,GAAGtC,SAAS,CAACwC,2BAAjB,IAAgDxC,SAAS,CAACuC,sCAAjE;AACH;AAzEY,CAAjB","sourcesContent":["var constants = require('../constants');\nmodule.exports = {\n\n    // Unit converters\n    yardsToFeet: function(n) {\n        return n * constants.YARDS_TO_FEET_FACTOR;\n    },\n\n    feetToYards: function(n) {\n        return n * constants.FEET_TO_YARDS_FACTOR;\n    },\n\n    yardsToInches: function(n) {\n        return n * constants.YARDS_TO_INCHES_FACTOR;\n    },\n\n    inchesToYards: function(n) {\n        return constants.INCHES_TO_YARDS_FACTOR * n;\n    },\n\n    inchesToMiles: function(n) {\n        return constants.INCHES_TO_MILES_FACTOR * n;\n    },\n\n    feetToInches: function(n) {\n        return constants.FEET_TO_INCHES_FACTOR * n;\n    },\n\n    feetToMeters: function (n) {\n        return constants.FEET_TO_METERS_FACTOR * n;\n    },\n\n    feetToMiles: function(n) {\n        return constants.FEET_TO_MILES_FACTOR * n;\n    },\n\n    inchesToFeet: function(n) {\n        return constants.INCHES_TO_FEET_FACTOR * n;\n    },\n\n    inchesToMeters: function(n) {\n        return constants.INCHES_TO_METERS_FACTOR * n;\n    },\n\n    milesToYards: function(n) {\n        return constants.MILES_TO_YARDS_FACTOR * n;\n    },\n\n    milesToMeters: function(n) {\n        return constants.MILES_TO_METERS_FACTOR * n;\n    },\n\n    milesToInches: function(n) {\n        return constants.MILES_TO_INCHES_FACTOR * n;\n    },\n\n    milesToFeet: function(n) {\n        return constants.MILES_TO_FEET_FACTOR * n;\n    },\n\n    yardsToMiles: function(n) {\n        return constants.YARDS_TO_MILES_FACTOR * n;\n    },\n\n    yardsToMeters: function(n) {\n        return constants.YARDS_TO_METERS_FACTOR * n;\n    },\n\n    toFahrenheit: function(val) {\n        return val * constants.CELSIUS_TO_FAHRENEIT_MUTLIPLIER_FACTOR + constants.CELSIUS_TO_FAHRENEIT_FACTOR;\n    },\n\n    toCelsius: function(val) {\n        return (val - constants.CELSIUS_TO_FAHRENEIT_FACTOR) / constants.CELSIUS_TO_FAHRENEIT_MUTLIPLIER_FACTOR;\n    },\n\n};\n"]},"metadata":{},"sourceType":"script"}