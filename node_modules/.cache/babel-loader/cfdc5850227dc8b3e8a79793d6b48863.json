{"ast":null,"code":"var _jsxFileName = \"/home/joep/Downloads/code_nation/masterCourse/week5/learning-react/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n///////////todo list ATTEMPT 2/////////////////\nimport { useState } from \"react\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [todoList, setTodoList] = useState([]);\n  const [userInput, setUserInput] = useState(\"\");\n\n  const updateInput = e => {\n    //onChange of inputbox, \n    setUserInput(e.target.value); //make userInput = input of box\n  };\n\n  const addHandler = e => {\n    //onClick of add button\n    const newArr = [...todoList]; //Adds every task in {todoList} to newArr.\n\n    newArr.push(userInput); //add userInput of textbox to newArr (adds new task to list)\n\n    setTodoList(newArr); //sets todoList to newArray (updates frontEnd todoList with new list.)\n\n    setUserInput(\"\"); //remove input displayed below inputBox. (seems as though nothing has changed, but the text displayed is now the content of the array, not the userInput.)\n  };\n\n  const removeHandler = index => {\n    //remove task from list\n    const newArr = [...todoList]; //add every task in toDo list to newArr (makes an identical copy)\n\n    newArr.splice(index, 1); //remove task from array\n\n    setTodoList(newArr); //updates frontend array with new version\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"To-do List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: updateInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addHandler,\n        children: \"add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), \" \", todoList.map((item, index) => {\n      return /*#__PURE__*/_jsxDEV(Card, {\n        index: index,\n        removeHandler: removeHandler,\n        item: item\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 16\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"jpfXdhjdkjRNkPgavbk7orF/iHw=\");\n\n_c = App;\n\nconst Card = props => {\n  _s2();\n\n  const [style, setStyle] = useState(\"inProgressButton\");\n  const [status, setStatus] = useState(\"In Progress\");\n\n  const changeStyle = () => {\n    console.log(\"you just clicked\");\n\n    if (status = \"Complete\") {\n      setStatus(\"In Progress\");\n      setStyle(\"inProgressButton\");\n    }\n\n    setStyle(\"completeButton\");\n    setStatus(\"Complete\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"item\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"task\",\n      children: props.item\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: style,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          onClick: () => changeStyle(\"Complete\"),\n          children: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => props.removeHandler(props.index),\n        className: \"remButton\",\n        children: \"remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 7\n  }, this);\n};\n\n_s2(Card, \"K9hlZOlfOkWIoSMdl22uTqbYTxs=\");\n\n_c2 = Card;\nexport default App; ///////////todo list TUTOR EXAMPLE/////////////////\n// import { useState } from \"react\";\n// const App = () => {\n//   const [list, setList] = useState([]);\n//   const [userInput, setUserInput] = useState(\"\");\n//   const updateInput = (e) => {\n//     setUserInput(e.target.value);\n//   };\n//   const addHandler = () => {\n//     const newArr = [...list];\n//     newArr.push(userInput);\n//     setList(newArr);\n//     setUserInput(\"\")\n//   };\n//   const removeHandler = (index) => {\n//     const newArr = [...list];\n//     newArr.splice(index, 1);\n//     setList(newArr);\n//   };\n//   return (\n//     <div>\n//       <h1>todo list</h1>\n//       <input type=\"text\" value={userInput} onChange={updateInput} />\n//       <button onClick={addHandler}>add</button>\n//       <h2>{userInput}</h2>\n//       {list.map((item, index) => {\n//         return <Card index={index} removeHandler={removeHandler} key={index} item={item} />;\n//       })}\n//     </div>\n//   );\n// };\n// const Card = (props) => {\n//   return (\n//     <div>\n//       <h2>{props.item}</h2>\n//       <button onClick={() => props.removeHandler(props.index)}>remove</button>\n//     </div>\n//   );\n// };\n// export default App;\n//// todo list ATTEMPT 1\n// import React, {useState} from \"react\";\n// import './App.css';\n// const IntroState = () => {\n//   const [tasks, setTasks] = useState([\n//     {task: \"shopping\", status: 33},\n//     {task: \"cooking\", status:12},\n//     {task: \"cleaning\", status: 13}\n//   ]);\n//   const [completed,setStatus] = useState(true);\n//   const greeting = (value) => {\n//     alert(value);\n//   };\n//   return (\n//     <div>\n//       {this.tasks.map((task, index) => {\n//         {!completed ? (\n//           <div className=\".item\">\n//             <Task task = {tasks[0].task} func={greeting(\"in progress\")} />\n//             <button onClick={() => setStatus(true)}>complete</button>\n//           </div>\n//         ) : (\n//           <div className=\".item\">\n//             <Task task = {tasks[0].task} func={greeting(\"complete\")} />\n//             <button onClick={() => setStatus(false)}>in progress</button>\n//           </div>\n//         )}\n//       })}\n//     </div>\n//   )\n// }\n// const Task = (props) => {\n//   return (\n//     <div>\n//       <h1>{props.task}</h1>\n//     </div>\n//   )\n// }\n// export default IntroState\n/////TODO complete props challenges presentation///////////////////////////////////\n/////TODO resume map presentation slide 29//////////////////////////////////////\n/////////////map method - returning entire components//////////////////////////\n// import React from 'react'\n// class App extends React.Component{\n//   state = {\n//     people: [\n//       {name: \"dan\", age:34},\n//       {name: \"ben\", age:21}\n//     ]    \n//   };\n//   render() {\n//     return(\n//       <div>\n//         {this.state.people.map((person,index) =>{\n//           return <Person key={index} name={person.name} age={person.age} />;\n//         })}\n//       </div>  \n//     )\n//   }\n// }\n// const Person = props => { //Person parameter represents each item in our array. These items are an object so we can use dot notation to access its values, but they'll be different each time.\n//   return (\n//     <div>\n//       <h1>{props.name}</h1>\n//       <p>{props.age}</p>\n//     </div>\n//   )\n// }\n// export default App\n/////////////map method - using state///////////////////////////////////////////////////\n//this is the same as below method, but using state instead of render()\n// import React from 'react'\n// class App extends React.Component {\n//   state = { //Sometimes you will stores arrays and stuff in the state. this is how.\n//     bookPrices: [2.5, 4.5, 3.5, 6.0, 8.0]\n//   }\n//   render() {\n//     return (\n//       <div>\n//         {this.state.bookPrices.map((price, index) => {\n//           return (\n//           <div key={index}> {/*If map function returns multiple elements,you only need to put a key on the parent.*/}\n//             <h1>I am h1 element</h1>\n//             <p>i am p element</p>\n//             <p>{price}</p>\n//             <button>Button</button>\n//           </div>)\n//         })}\n//       </div>\n//     )\n//   }\n// }\n// export default App\n//////////////map method////////////////////////////////////////////////////////////\n// import React from 'react'\n// class App extends React.Component {\n//   render() {\n//     const bookPrices = [2.5, 4.5, 3.5, 6.9, 8.0] //variables, functions and stuff get declared in render()\n//   return (\n//     <div>\n//       {bookPrices.map(price => {\n//         return <h1>The price is {price}</h1>;\n//       })}\n//     </div>\n//   )\n//   }\n// }\n// export default App\n///////////incremenet and decrementing with buttons////////////////////////\n//show value which get decreased when minus button pressed and increased when up button pressed.\n// import React, {useState} from \"react\";\n// const App = () => {\n//   const [num, setNum] = useState(0)\n//   const minusHandler = () => {\n//     setNum(num -1)\n//   }\n//   return (\n//     <div>\n//       <h1>{num}</h1>\n//       <button onClick={() => setNum(num + 1)}>add one</button>\n//       <button onClick={() => setNum(num - 1)}>minus one</button>\n//       {/* <button onClick={minusHandler}>minus one</button> */} {/*alternative to above line */}\n//     </div>\n//   )\n// }\n// export default App\n////////////////////////////////////////////\n// Here we pass state and methods via props\n// import React, {useState} from \"react\";\n// const App = () => {\n//   const [persons, setPersons] = useState([\n//     {name: \"Leon\"}, \n//     {name: \"Jordan\"}\n//   ])\n//   const handleClick = () => {\n//     console.log(\"Clickity click\");\n//   }\n//   return (\n//     <div>\n//       <Person name={persons[0].name} clickMe={handleClick}/>\n//       <Person name={persons[1].name} clickMe={handleClick}/>\n//     </div>\n//   )\n// }\n// const Person = (props) => {\n//   return (\n//     // <h1 onClick={props.clickMe}>{props.name}</h1> //prints \"clickety click\" upon click of \"Jordan\" text.\n//     <h1 onClick={() => props.clickMe(\"Hi there\")}>{props.name}</h1> //This is how to pass a value to a function on click, which is handled slightly differnetly. this is called an anonymous function.\n//   )\n// }\n//////////////stateDemonstration 2//////////////////////\n// import React, {useState} from \"react\";\n// const App = () => {\n//     const [count, setCount] = useState(0) //useState function returns 2 values which we restructure with []\n//     return (\n//       <div>\n//         <h1>{count}</h1>\n//       </div>\n//     )\n//     increment = () => {\n//     }\n//   }\n// //////////////state demonstration 1/////////////////////\n// import './App.css';\n// import React from 'react';\n// class App extends React.Component {\n//   state = {  //state is a property of the class\n//     persons: [ //persons is a property of state. Holds an array of 2 objects.\n//       {name: \"Dan\", age: 34},\n//       {name: \"Ben\", age: 21}\n//     ]\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <h1>I'm a class component</h1>\n//         <p>{this.state.persons[1].age}</p> {/* returns age of 2nd persons. (21)*/}        \n//       </div>\n//     );\n//   }\n// }\n// ///////////////////////////////////////////\n// export default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Card\");","map":{"version":3,"sources":["/home/joep/Downloads/code_nation/masterCourse/week5/learning-react/src/App.js"],"names":["useState","App","todoList","setTodoList","userInput","setUserInput","updateInput","e","target","value","addHandler","newArr","push","removeHandler","index","splice","map","item","Card","props","style","setStyle","status","setStatus","changeStyle","console","log"],"mappings":"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":["\n///////////todo list ATTEMPT 2/////////////////\nimport { useState } from \"react\";\nimport './App.css';\nconst App = () => {\n  const [todoList, setTodoList] = useState([]);\n  const [userInput, setUserInput] = useState(\"\");\n\n\n  const updateInput = (e) => { //onChange of inputbox, \n    setUserInput(e.target.value); //make userInput = input of box\n  };\n\n\n  const addHandler = (e) => { //onClick of add button\n    const newArr = [...todoList]; //Adds every task in {todoList} to newArr.\n    newArr.push(userInput); //add userInput of textbox to newArr (adds new task to list)\n    setTodoList(newArr); //sets todoList to newArray (updates frontEnd todoList with new list.)\n    setUserInput(\"\") //remove input displayed below inputBox. (seems as though nothing has changed, but the text displayed is now the content of the array, not the userInput.)\n  };\n\n  const removeHandler = (index) => { //remove task from list\n    const newArr = [...todoList]; //add every task in toDo list to newArr (makes an identical copy)\n    newArr.splice(index, 1); //remove task from array\n    setTodoList(newArr); //updates frontend array with new version\n  };\n\n  return (\n    <div>\n      <div id=\"header\">\n        <h1>To-do List</h1>\n\n        <input \n          type=\"text\" \n          onChange={updateInput}\n        />\n        <button \n          onClick={addHandler}\n        >\n          add\n      </button>\n      </div>\n      {/* <h2>{userInput}</h2> */} {/*displays the live content of inputBox*/}\n      {todoList.map((item, index) => {\n        return <Card \n          index={index} \n          removeHandler={removeHandler} \n          key={index} \n          item={item} \n        />;\n      })}\n    </div>\n  );\n};\n\n\n\nconst Card = (props) => {\n  const [style, setStyle] = useState(\"inProgressButton\")\n  const [status, setStatus] = useState(\"In Progress\")\n\n  const changeStyle = () => {\n    console.log(\"you just clicked\");\n    if (status=\"Complete\") {\n      setStatus(\"In Progress\");\n      setStyle(\"inProgressButton\")\n    }\n    setStyle(\"completeButton\");\n    setStatus(\"Complete\")\n  };\n  \n  return (\n      <div className=\"item\">\n        <h2 className=\"task\">{props.item}</h2>\n        <div className=\"test\">\n          <div className={style}>\n            <p onClick={() => changeStyle(\"Complete\")}>\n              {status}\n            </p>\n          </div>\n          <button\n            onClick={() => props.removeHandler(props.index)}\n            className=\"remButton\">\n            remove\n          </button>\n        </div>\n    </div>\n  );\n  };\n\nexport default App;\n\n///////////todo list TUTOR EXAMPLE/////////////////\n\n// import { useState } from \"react\";\n// const App = () => {\n//   const [list, setList] = useState([]);\n//   const [userInput, setUserInput] = useState(\"\");\n\n//   const updateInput = (e) => {\n//     setUserInput(e.target.value);\n//   };\n//   const addHandler = () => {\n//     const newArr = [...list];\n//     newArr.push(userInput);\n//     setList(newArr);\n//     setUserInput(\"\")\n//   };\n//   const removeHandler = (index) => {\n//     const newArr = [...list];\n//     newArr.splice(index, 1);\n//     setList(newArr);\n//   };\n\n//   return (\n//     <div>\n//       <h1>todo list</h1>\n//       <input type=\"text\" value={userInput} onChange={updateInput} />\n//       <button onClick={addHandler}>add</button>\n//       <h2>{userInput}</h2>\n//       {list.map((item, index) => {\n//         return <Card index={index} removeHandler={removeHandler} key={index} item={item} />;\n//       })}\n//     </div>\n//   );\n// };\n\n// const Card = (props) => {\n//   return (\n//     <div>\n//       <h2>{props.item}</h2>\n//       <button onClick={() => props.removeHandler(props.index)}>remove</button>\n//     </div>\n//   );\n// };\n// export default App;\n\n\n\n\n//// todo list ATTEMPT 1\n// import React, {useState} from \"react\";\n// import './App.css';\n\n// const IntroState = () => {\n//   const [tasks, setTasks] = useState([\n//     {task: \"shopping\", status: 33},\n//     {task: \"cooking\", status:12},\n//     {task: \"cleaning\", status: 13}\n//   ]);\n\n//   const [completed,setStatus] = useState(true);\n\n//   const greeting = (value) => {\n//     alert(value);\n//   };\n\n//   return (\n//     <div>\n//       {this.tasks.map((task, index) => {\n//         {!completed ? (\n//           <div className=\".item\">\n//             <Task task = {tasks[0].task} func={greeting(\"in progress\")} />\n//             <button onClick={() => setStatus(true)}>complete</button>\n//           </div>\n\n//         ) : (\n//           <div className=\".item\">\n//             <Task task = {tasks[0].task} func={greeting(\"complete\")} />\n//             <button onClick={() => setStatus(false)}>in progress</button>\n//           </div>\n//         )}\n//       })}\n//     </div>\n//   )\n// }\n\n// const Task = (props) => {\n//   return (\n//     <div>\n//       <h1>{props.task}</h1>\n//     </div>\n//   )\n// }\n\n\n\n// export default IntroState\n\n/////TODO complete props challenges presentation///////////////////////////////////\n/////TODO resume map presentation slide 29//////////////////////////////////////\n\n/////////////map method - returning entire components//////////////////////////\n// import React from 'react'\n// class App extends React.Component{\n//   state = {\n//     people: [\n//       {name: \"dan\", age:34},\n//       {name: \"ben\", age:21}\n//     ]    \n//   };\n  \n//   render() {\n//     return(\n//       <div>\n//         {this.state.people.map((person,index) =>{\n//           return <Person key={index} name={person.name} age={person.age} />;\n//         })}\n//       </div>  \n//     )\n//   }\n// }\n\n// const Person = props => { //Person parameter represents each item in our array. These items are an object so we can use dot notation to access its values, but they'll be different each time.\n//   return (\n//     <div>\n//       <h1>{props.name}</h1>\n//       <p>{props.age}</p>\n//     </div>\n//   )\n// }\n\n// export default App\n\n/////////////map method - using state///////////////////////////////////////////////////\n//this is the same as below method, but using state instead of render()\n// import React from 'react'\n// class App extends React.Component {\n//   state = { //Sometimes you will stores arrays and stuff in the state. this is how.\n//     bookPrices: [2.5, 4.5, 3.5, 6.0, 8.0]\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         {this.state.bookPrices.map((price, index) => {\n//           return (\n//           <div key={index}> {/*If map function returns multiple elements,you only need to put a key on the parent.*/}\n//             <h1>I am h1 element</h1>\n//             <p>i am p element</p>\n//             <p>{price}</p>\n//             <button>Button</button>\n//           </div>)\n//         })}\n//       </div>\n//     )\n//   }\n// }\n\n// export default App\n\n//////////////map method////////////////////////////////////////////////////////////\n// import React from 'react'\n// class App extends React.Component {\n//   render() {\n//     const bookPrices = [2.5, 4.5, 3.5, 6.9, 8.0] //variables, functions and stuff get declared in render()\n\n//   return (\n//     <div>\n//       {bookPrices.map(price => {\n//         return <h1>The price is {price}</h1>;\n//       })}\n//     </div>\n//   )\n//   }\n// }\n\n// export default App\n\n\n///////////incremenet and decrementing with buttons////////////////////////\n//show value which get decreased when minus button pressed and increased when up button pressed.\n// import React, {useState} from \"react\";\n\n// const App = () => {\n//   const [num, setNum] = useState(0)\n//   const minusHandler = () => {\n//     setNum(num -1)\n//   }\n//   return (\n//     <div>\n//       <h1>{num}</h1>\n//       <button onClick={() => setNum(num + 1)}>add one</button>\n//       <button onClick={() => setNum(num - 1)}>minus one</button>\n//       {/* <button onClick={minusHandler}>minus one</button> */} {/*alternative to above line */}\n//     </div>\n//   )\n// }\n\n// export default App\n\n////////////////////////////////////////////\n// Here we pass state and methods via props\n// import React, {useState} from \"react\";\n\n// const App = () => {\n//   const [persons, setPersons] = useState([\n//     {name: \"Leon\"}, \n//     {name: \"Jordan\"}\n//   ])\n\n//   const handleClick = () => {\n//     console.log(\"Clickity click\");\n//   }\n\n//   return (\n//     <div>\n//       <Person name={persons[0].name} clickMe={handleClick}/>\n//       <Person name={persons[1].name} clickMe={handleClick}/>\n//     </div>\n//   )\n// }\n\n// const Person = (props) => {\n//   return (\n//     // <h1 onClick={props.clickMe}>{props.name}</h1> //prints \"clickety click\" upon click of \"Jordan\" text.\n//     <h1 onClick={() => props.clickMe(\"Hi there\")}>{props.name}</h1> //This is how to pass a value to a function on click, which is handled slightly differnetly. this is called an anonymous function.\n//   )\n\n// }\n\n\n\n//////////////stateDemonstration 2//////////////////////\n// import React, {useState} from \"react\";\n\n// const App = () => {\n//     const [count, setCount] = useState(0) //useState function returns 2 values which we restructure with []\n\n//     return (\n//       <div>\n//         <h1>{count}</h1>\n//       </div>\n//     )\n    \n//     increment = () => {\n\n//     }\n//   }\n\n// //////////////state demonstration 1/////////////////////\n\n// import './App.css';\n// import React from 'react';\n\n// class App extends React.Component {\n//   state = {  //state is a property of the class\n//     persons: [ //persons is a property of state. Holds an array of 2 objects.\n//       {name: \"Dan\", age: 34},\n//       {name: \"Ben\", age: 21}\n//     ]\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <h1>I'm a class component</h1>\n//         <p>{this.state.persons[1].age}</p> {/* returns age of 2nd persons. (21)*/}        \n//       </div>\n//     );\n//   }\n// }\n// ///////////////////////////////////////////\n\n// export default App;"]},"metadata":{},"sourceType":"module"}