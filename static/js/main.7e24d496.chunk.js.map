{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Card","props","useState","style","setStyle","status","setStatus","className","item","onClick","console","log","removeHandler","index","App","todoList","setTodoList","userInput","setUserInput","newArr","splice","id","type","onChange","e","target","value","push","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAoDMA,EAAO,SAACC,GACZ,MAA0BC,mBAAS,2BAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,eAArC,mBAAOG,EAAP,KAAeC,EAAf,KAaA,OACI,sBAAKC,UAAU,OAAf,UACE,oBAAIA,UAAU,OAAd,SAAsBN,EAAMO,OAC5B,sBAAKD,UAAU,OAAf,UACE,qBACEA,UAAWJ,EACXM,QAAS,kBAhBjBC,QAAQC,IAAI,yBACA,YAARN,GACFC,EAAU,eACVF,EAAS,6BAETE,EAAU,YACVF,EAAS,4BAQL,SAGE,4BACGC,MAGL,qBACEE,UAAU,mBACVE,QAAS,kBAAMR,EAAMW,cAAcX,EAAMY,QAF3C,SAGE,gDASGC,EAtFH,WACV,MAAgCZ,mBAAS,IAAzC,mBAAOa,EAAP,KAAiBC,EAAjB,KACA,EAAkCd,mBAAS,IAA3C,mBAAOe,EAAP,KAAkBC,EAAlB,KAcMN,EAAgB,SAACC,GACrB,IAAMM,EAAM,YAAOJ,GACnBI,EAAOC,OAAOP,EAAO,GACrBG,EAAYG,IAGd,OACE,gCACE,sBAAKE,GAAG,SAAR,UACE,uBACEC,KAAK,OACLC,SAtBY,SAACC,GACnBN,EAAaM,EAAEC,OAAOC,UAuBlB,wBACEL,GAAG,YACHZ,QAtBW,SAACe,GAClB,IAAML,EAAM,YAAOJ,GACnBI,EAAOQ,KAAKV,GACZD,EAAYG,GACZD,EAAa,KAgBT,iBAKA,+FAEDH,EAASa,KAAI,SAACpB,EAAMK,GACnB,OAAO,cAAC,EAAD,CACLA,MAAOA,EACPD,cAAeA,EAEfJ,KAAMA,GADDK,UChCAgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7e24d496.chunk.js","sourcesContent":["\n///////////todo list ATTEMPT 2/////////////////\nimport { useState } from \"react\";\nimport './App.css';\nconst App = () => {\n  const [todoList, setTodoList] = useState([]);\n  const [userInput, setUserInput] = useState(\"\");\n\n\n  const updateInput = (e) => { //onChange of inputbox, \n    setUserInput(e.target.value); //make userInput = input of box\n  };\n\n  const addHandler = (e) => { //onClick of add button\n    const newArr = [...todoList]; //Adds every task in {todoList} to newArr.\n    newArr.push(userInput); //add userInput of textbox to newArr (adds new task to list)\n    setTodoList(newArr); //sets todoList to newArray (updates frontEnd todoList with new list.)\n    setUserInput(\"\") //remove input displayed below inputBox. (seems as though nothing has changed, but the text displayed is now the content of the array, not the userInput.)\n  };\n\n  const removeHandler = (index) => { //remove task from list\n    const newArr = [...todoList]; //add every task in toDo list to newArr (makes an identical copy)\n    newArr.splice(index, 1); //remove task from array\n    setTodoList(newArr); //updates frontend array with new version\n  };\n\n  return (\n    <div>\n      <div id=\"inputs\">\n        <input \n          type=\"text\" \n          onChange={updateInput}\n        />\n        <button \n          id=\"addButton\"\n          onClick={addHandler}>\n            add\n        </button>\n        <p>Click on the below buttons to remove tasks or change status</p>\n      </div>\n      {todoList.map((item, index) => {\n        return <Card \n          index={index} \n          removeHandler={removeHandler} \n          key={index} \n          item={item} \n        />;\n      })}\n    </div>\n  );\n};\n\nconst Card = (props) => {\n  const [style, setStyle] = useState(\"inProgressButton button\")\n  const [status, setStatus] = useState(\"In Progress\")\n\n  const changeStyle = () => {\n    console.log(\"you just clicked\");\n    if (status==\"Complete\") {\n      setStatus(\"In Progress\");\n      setStyle(\"inProgressButton button\")\n    } else {\n      setStatus(\"Complete\");\n      setStyle(\"completeButton button\")\n    }\n  };\n  \n  return (\n      <div className=\"item\">\n        <h2 className=\"task\">{props.item}</h2>\n        <div className=\"test\">\n          <div \n            className={style}\n            onClick={() => changeStyle(\"Complete\")}>\n            <p>\n              {status}\n            </p>\n          </div>\n          <div \n            className=\"remButton button\"\n            onClick={() => props.removeHandler(props.index)}>\n            <p>\n              remove\n            </p>\n          </div>\n        </div>\n    </div>\n  );\n  };\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}